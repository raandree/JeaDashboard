Configurations:
- FilesAndFolders
- Scripts

#Cannot use the file resoure for this as of this bug
#Invalid MOF generated if File resource used with contents that contain ModuleVersion=xxx string
#https://github.com/PowerShell/PowerShell/issues/7200
Scripts:
  Items:
    - Name: JeaDiscovery.psd1
      GetScript: |
        @{
          Result = (Get-Content -Path 'C:\Program Files\WindowsPowerShell\Modules\JeaDiscovery\JeaDiscovery.psd1' -Raw -ErrorAction SilentlyContinue)
        }
      TestScript: |
        if (-not (Test-Path -Path 'C:\Program Files\WindowsPowerShell\Modules\JeaDiscovery\JeaDiscovery.psd1')) {
            return $false
        }
        
        $desiredContent = @'
        @{
        RootModule           = 'JeaDiscovery.psm1'
        ModuleVersion        = '1.0.0'
        GUID                 = '70474a37-f00f-42dc-9048-91695e1cd232'
        Author               = 'DSC Community'
        CompanyName          = 'DSC Community'
        Copyright            = 'Copyright the DSC Community contributors. All rights reserved.'
        Description          = 'This module contains functions for discovering JEA endpoints.'
        PowerShellVersion    = '5.1'
        FunctionsToExport    = '*'
        }
        '@
        $currentContent = Get-Content -Path 'C:\Program Files\WindowsPowerShell\Modules\JeaDiscovery\JeaDiscovery.psd1' -Raw
        $currentContent = $currentContent -replace '\s', ''
        $desiredContent = $desiredContent -replace '\s', ''
        $currentContent -eq $desiredContent
      SetScript: |
        $content = @'
        @{
        RootModule           = 'JeaDiscovery.psm1'
        ModuleVersion        = '1.0.0'
        GUID                 = '70474a37-f00f-42dc-9048-91695e1cd232'
        Author               = 'DSC Community'
        CompanyName          = 'DSC Community'
        Copyright            = 'Copyright the DSC Community contributors. All rights reserved.'
        Description          = 'This module contains functions for discovering JEA endpoints.'
        PowerShellVersion    = '5.1'
        FunctionsToExport    = '*'
        }
        '@
        $content | Set-Content -Path 'C:\Program Files\WindowsPowerShell\Modules\JeaDiscovery\JeaDiscovery.psd1' -Encoding UTF8

FilesAndFolders:
  Items:
    - DestinationPath: "C:\\Program Files\\WindowsPowerShell\\Modules\\JeaDiscovery\\JeaDiscovery.psm1"
      Type: File
      Contents: |

        function Copy-Object {
            param (
                [object]
                $DeepCopyObject
            )

            $serialData = [System.Management.Automation.PSSerializer]::Serialize($DeepCopyObject)
            [System.Management.Automation.PSSerializer]::Deserialize($serialData)
        }

        function Get-ModuleWithRoleCapabilities {
          param(
              $BasePath = ($env:PSModulePath -split ';' | Where-Object { $_ -like '*Program Files*'})
          )

          dir -Path $BasePath | Where-Object { dir -Path $_.FullName | Where-Object { $_.Name -eq 'RoleCapabilities' } } | ForEach-Object {
              [pscustomobject]@{
                  Name = $_.BaseName
                  ModuleBase = $_.FullName
                  RoleCapabilities = (dir -Path "$($_.FullName)\RoleCapabilities")
              }
          }
        }

        function Get-PSRoleCapability {
          param (
              [Parameter(Mandatory)]
              [string[]]$ModuleBasePath
          )

          $moduleName = Split-Path -Path $ModuleBasePath -Leaf
          $psrcFiles = dir -Path "$ModuleBasePath\RoleCapabilities" -Filter *.psrc
          
          foreach ($psrcFile in $psrcFiles) {
              $h = [ordered]@{}
              $h.Add('ModuleName', $moduleName)
              $h.Add('RoleName', $psrcFile.BaseName)
              
              (Invoke-Expression -Command (Get-Content -Path $psrcFile.FullName -Raw)).GetEnumerator() | ForEach-Object {
                  $h.Add($_.Key, $_.Value)
              }
              [pscustomobject]$h
          }
        }

        function Get-FunctionDefaultParameter {
            <#
            .SYNOPSIS
            This is a function that will find all of the default parameter names and values from a given function.
            
            .EXAMPLE
            PS> Get-FunctionDefaultParameter -FunctionName Get-Something
            
            .PARAMETER FuntionName
            A mandatory string parameter representing the name of the function to find default parameters to.
            
            #>
            [CmdletBinding()]
            [OutputType([hashtable])]
            param
            (
                [Parameter(Mandatory, ParameterSetName = 'FunctionName')]
                [ValidateNotNullOrEmpty()]
                [string]$FunctionName,

                [Parameter(Mandatory, ParameterSetName = 'Scriptblock')]
                [ValidateNotNullOrEmpty()]
                [scriptblock]$Scriptblock
            )
            try {
                $ast = if ($FunctionName) {
                    (Get-Command -Name $FunctionName).ScriptBlock.Ast
                }
                else {
                    $Scriptblock.Ast
                }
                
                if (-not $ast) {
                    return @{}
                }
                $select = @{ Name = 'Name'; Expression = { $_.Name.VariablePath.UserPath } },
                @{ Name = 'Value'; Expression = { $_.DefaultValue.Extent.Text -replace "`"|'" } }
                
                $ht = @{ }
                @($ast.FindAll( { $args[0] -is [System.Management.Automation.Language.ParameterAst] }, $true) | Where-Object { $_.DefaultValue } | Select-Object -Property $select).ForEach( {
                        $ht[$_.Name] = $_.Value    
                    })
                $ht
                
            }
            catch {
                Write-Error -Message $_.Exception.Message
            }
        }

        function Get-FunctionParameterSet {
            <#
                    .SYNOPSIS
                    This is a function that will find all of the default parameter names and values from a given function.
            
                    .EXAMPLE
                    PS> Get-FunctionDefaultParameter -FunctionName Get-Something
            
                    .PARAMETER FuntionName
                    A mandatory string parameter representing the name of the function to find default parameters to.
            
            #>
            [CmdletBinding()]
            [OutputType([hashtable])]
            param
            (
                [Parameter(Mandatory, ParameterSetName = 'FunctionName')]
                [ValidateNotNullOrEmpty()]
                [string]$FunctionName,

                [Parameter(Mandatory, ParameterSetName = 'Scriptblock')]
                [ValidateNotNullOrEmpty()]
                [scriptblock]$Scriptblock
            )
            try {
                $ast = if ($FunctionName) {
                    (Get-Command -Name $FunctionName).ScriptBlock.Ast
                }
                else {
                    $Scriptblock.Ast
                }
                
                if (-not $ast) {
                    return @{}
                }
                $select = @{ Name = 'Name'; Expression = { $_.Name.VariablePath.UserPath } },
                @{ Name = 'Value'; Expression = { $_.DefaultValue.Extent.Text -replace "`"|'" } }
                
                $ht = @{ }
                $params = $ast.FindAll( { $args[0] -is [System.Management.Automation.Language.ParameterAst] }, $true)

                $parameterSets = @()
                $parameterSets += $params | ForEach-Object { ($_.Attributes.NamedArguments | Where-Object ArgumentName -eq 'ParameterSetName').Argument.Value } | Select-Object -Unique
                if ($parameterSets.Count -eq 0) {
                    $parameterSets += '__Default'
                }
                $parameterSets
            }
            catch {
                Write-Error -Message $_.Exception.Message
            }
        }

        function Get-FunctionParameter {
            param(
                [Parameter(Mandatory)]
                [scriptblock]
                $ScriptBlock,

                [Parameter()]
                [string]
                $ParameterSetName
            )

            $commonParameters = [System.Management.Automation.Internal.CommonParameters].GetProperties().Name
            
            $guid = New-Guid
            $f = New-Item -Path "Function:\$guid" -Value $ScriptBlock

            $parameters = (Get-Command -Name $guid).Parameters
            if ($parameters.Count -eq 0) {
                return
            }
            $parameters = $parameters.GetEnumerator() | Where-Object Key -NotIn $commonParameters
            
            if (-not $ParameterSetName) {
                if ($parameters.GetType().Name -eq 'KeyValuePair`2') {
                    $parameters
                }
                else {
                    $parameters.GetEnumerator()
                }
            }
            else {
                $p = if ($parameters.GetType().Name -eq 'KeyValuePair`2') {
                    $parameters
                }
                else {
                    $parameters.GetEnumerator()
                }
                $p | Where-Object {
                    $_.Value.ParameterSets.Keys -contains $ParameterSetName -or $_.Value.ParameterSets.Keys -contains '__AllParameterSets'
                }
            }
            
            $f | Remove-Item
        }

        function Get-JeaEndpoint {
            param(
                [Parameter(Mandatory)]
                [string]
                $ComputerName,

                [Parameter()]
                [string]
                $DiscoveryEndpoint = 'JeaDiscovery',

                [Parameter()]
                [pscredential]
                $Credential
            )
            
            $param = @{
                ComputerName      = $ComputerName
                ConfigurationName = $DiscoveryEndpoint
                ScriptBlock       = { Get-JeaPSSessionConfiguration }
            }
            if ($Credential) {
                $param.Add('Credential', $Credential)
            }

            Invoke-Command @param | Where-Object Name -ne JeaDiscovery | ForEach-Object {
                [pscustomobject]@{
                    Author = $_.Author
                    GroupManagedServiceAccount = $_.GroupManagedServiceAccount
                    RoleDefinitions = $_.RoleDefinitions
                    SessionType = $_.SessionType
                    #SchemaVersion                 : 2.0.0.0
                    #GUID                          : 7da04eca-39fd-4aef-b3a4-7f25d7d083d3
                    #RunAsPassword                 : System.Security.SecureString
                    #ResourceUri                   : http://schemas.microsoft.com/powershell/AdManagement
                    #Capability                    : {Shell}
                    #PSVersion                     : 5.1
                    #AutoRestart                   : false
                    #ExactMatch                    : False
                    #RunAsVirtualAccount           : false
                    #SDKVersion                    : 2
                    #Uri                           : http://schemas.microsoft.com/powershell/AdManagement
                    #MaxConcurrentCommandsPerShell : 2147483647
                    #IdleTimeoutms                 : 7200000
                    #ParentResourceUri             : http://schemas.microsoft.com/powershell/AdManagement
                    RunAsUser = $_.RunAsUser
                    #OutputBufferingMode           : Block
                    #Architecture                  : 64
                    #UseSharedProcess              : false
                    #MaxProcessesPerShell          : 2147483647
                    #Filename                      : %windir%\system32\pwrshplugin.dll
                    #MaxShellsPerUser              : 2147483647
                    #ConfigFilePath                : C:\Windows\System32\WindowsPowerShell\v1.0\SessionConfig\AdManagement_7da04eca-39fd-4aef-b3a4-7f25d7d083d3.pssc
                    #MaxShells                     : 2147483647
                    #SupportsOptions               : true
                    #lang                          : en-US
                    #MaxIdleTimeoutms              : 2147483647
                    #xmlns                         : http://schemas.microsoft.com/wbem/wsman/1/config/PluginConfiguration
                    #Enabled                       : True
                    SecurityDescriptorSddl = $_.SecurityDescriptorSddl
                    Name = $_.Name
                    #ProcessIdleTimeoutSec         : 0
                    #MaxConcurrentUsers            : 2147483647
                    #MaxMemoryPerShellMB           : 2147483647
                    RunAsVirtualAccountGroups = $_.RunAsVirtualAccountGroups
                    #XmlRenderingType              : text
                    Permission = $_.Permission
                    #PSComputerName                : localhost
                    RunspaceId = $_.RunspaceId
                    #PSShowComputerName            : True
                }
            }
        }

        function Get-JeaTestEndpoint {
            param(
                [Parameter(Mandatory)]
                [string]
                $ComputerName,

                [Parameter()]
                [string]
                $DiscoveryEndpoint = 'JeaDiscovery',

                [Parameter()]
                [pscredential]
                $Credential
            )
            
            1..4 | ForEach-Object {
                [PSCustomObject]@{ 
                    Name           = "Local$_"
                    PSComputerName = $ComputerName
                    PSVersion      = 5.1
                    Permission     = 'contoso\Domain Users AccessAllowed, contoso\Domain Computers AccessAllowed'
                }
            }
        }

        function Get-JeaEndpointCapability {
            param(
                [Parameter(Mandatory)]
                [string]
                $ComputerName,

                [Parameter(Mandatory)]
                [string]
                $JeaEndpointName,

                [Parameter(Mandatory)]
                [string]
                $Username,

                [Parameter()]
                [string]
                $DiscoveryEndpoint = 'JeaDiscovery',

                [Parameter()]
                [pscredential]
                $Credential
            )

            $param = @{
                ComputerName      = $ComputerName
                ConfigurationName = $DiscoveryEndpoint
                ScriptBlock       = { Get-JeaPSSessionCapability -ConfigurationName $args[0] -Username $args[1] -OnlyVisibleFunctions }
                ArgumentList      = $JeaEndpointName, $Username
            }
            if ($Credential) {
                $param.Add('Credential', $Credential)
            }

            Invoke-Command @param
        }

        function Get-JeaTestEndpointCapability {
            param(
                [Parameter(Mandatory)]
                [string]$JeaEndpointName
            )

            Get-Command -CommandType Cmdlet |
            Where-Object { $_.Parameters } |
            Get-Random -Count 10 |
            Select-Object -Property Name, Parameters, CommandType
        }

        function Invoke-Ternary {
            param
            (
                [Parameter(Mandatory)]
                [scriptblock]
                $Decider,

                [Parameter(Mandatory)]
                [scriptblock]
                $IfTrue,

                [Parameter(Mandatory)]
                [scriptblock]
                $IfFalse
            )

            if (&$Decider) {
                &$IfTrue
            }
            else {
                &$IfFalse
            }
        }
