JeaEndpoints:
  EndPoints:
  - Name: JeaDiscovery
    Ensure: Present
    RoleDefinitions:
      NT AUTHORITY\Authenticated Users:
        RoleCapabilities:
        - JeaCapability
    SessionType: RestrictedRemoteServer
  - Name: JeaDemo1
    GroupManagedServiceAccount: contoso\GMSA1
    Ensure: Present
    RoleDefinitions:
      contoso\Domain Users:
        RoleCapabilities:
        - Demo1
      contoso\Domain Computers:
        RoleCapabilities:
        - Demo1
    SessionType: RestrictedRemoteServer
  - Name: JeaDemo2
    GroupManagedServiceAccount: contoso\GMSA2
    Ensure: Present
    RoleDefinitions:
      contoso\Domain Users:
        RoleCapabilities:
        - Demo1
        - Demo2
      contoso\Domain Computers:
        RoleCapabilities:
        - Demo1
        - Demo2
    SessionType: RestrictedRemoteServer
  - Name: AdManagement
    GroupManagedServiceAccount: contoso\GMSA2
    Ensure: Present
    RoleDefinitions:
      contoso\Domain Users:
        RoleCapabilities:
        - AdManagement
      contoso\Domain Computers:
        RoleCapabilities:
        - AdManagement
    SessionType: RestrictedRemoteServer
  - Name: DhcpManagement
    GroupManagedServiceAccount: contoso\GMSA2
    Ensure: Present
    RoleDefinitions:
      contoso\Domain Users:
        RoleCapabilities:
        - DhcpManagement
      contoso\Domain Computers:
        RoleCapabilities:
        - DhcpManagement
    SessionType: RestrictedRemoteServer
  - Name: AdTest
    GroupManagedServiceAccount: contoso\GMSA2
    Ensure: Present
    RoleDefinitions:
      contoso\Domain Users:
        RoleCapabilities:
        - AdTest
      contoso\Domain Computers:
        RoleCapabilities:
        - AdTest
    SessionType: RestrictedRemoteServer
Configurations:
- JeaRoles
- JeaEndpoints
- FilesAndFolders
- Scripts
LcmConfig:
  Settings:
    RefreshMode: Push
Scripts:
  Items:
  - Name: JeaDiscovery.psd1
    GetScript: |
      @{
        Result = (Get-Content -Path 'C:\Program Files\WindowsPowerShell\Modules\JeaDiscovery\JeaDiscovery.psd1' -Raw -ErrorAction SilentlyContinue)
      }
    TestScript: |
      if (-not (Test-Path -Path 'C:\Program Files\WindowsPowerShell\Modules\JeaDiscovery\JeaDiscovery.psd1')) {
          return $false
      }

      $desiredContent = @'
      @{
      RootModule           = 'JeaDiscovery.psm1'
      ModuleVersion        = '1.0.0'
      GUID                 = '70474a37-f00f-42dc-9048-91695e1cd232'
      Author               = 'DSC Community'
      CompanyName          = 'DSC Community'
      Copyright            = 'Copyright the DSC Community contributors. All rights reserved.'
      Description          = 'This module contains functions for discovering JEA endpoints.'
      PowerShellVersion    = '5.1'
      FunctionsToExport    = '*'
      }
      '@
      $currentContent = Get-Content -Path 'C:\Program Files\WindowsPowerShell\Modules\JeaDiscovery\JeaDiscovery.psd1' -Raw
      $currentContent = $currentContent -replace '\s', ''
      $desiredContent = $desiredContent -replace '\s', ''
      $currentContent -eq $desiredContent
    SetScript: |
      $content = @'
      @{
      RootModule           = 'JeaDiscovery.psm1'
      ModuleVersion        = '1.0.0'
      GUID                 = '70474a37-f00f-42dc-9048-91695e1cd232'
      Author               = 'DSC Community'
      CompanyName          = 'DSC Community'
      Copyright            = 'Copyright the DSC Community contributors. All rights reserved.'
      Description          = 'This module contains functions for discovering JEA endpoints.'
      PowerShellVersion    = '5.1'
      FunctionsToExport    = '*'
      }
      '@
      $content | Set-Content -Path 'C:\Program Files\WindowsPowerShell\Modules\JeaDiscovery\JeaDiscovery.psd1' -Encoding UTF8
PSDscAllowDomainUser: true
NodeName: FIWeb2
PSDscAllowPlainTextPassword: true
JeaRoles:
  Roles:
  - Path: C:\Program Files\WindowsPowerShell\Modules\Demos\RoleCapabilities\AdManagement.psrc
    ModulesToImport:
    - ActiveDirectory
    - DnsServer
    VisibleFunctions:
    - New-xDnsRecord
    - New-xAdUser
    - Remove-xAdUser
    FunctionDefinitions:
    - Name: New-xDnsRecord
      ScriptBlock: "param (\n    [Parameter(Mandatory)]\n    [string]$IPv4Address,\n    \n    [Parameter(Mandatory)]\n    [string]$Name,\n    \n    [Parameter(Mandatory)]\n    [string]$ZoneName,\n\n    [string]$ComputerName = ((Get-ADDomainController).HostName)\n)\nAdd-DnsServerResourceRecordA @PSBoundParameters\n"
    - Name: New-xAdUser
      ScriptBlock: "param (\n    [Parameter(ParameterSetName = 'Default')]\n    [string]$Path = \"CN=Users,$((Get-ADRootDSE).defaultNamingContext)\",\n    \n    [Parameter(Mandatory, ParameterSetName = 'Default')]\n    [string]$Name,\n    \n    [Parameter(ParameterSetName = 'Default')]\n    [string]$GivenName,\n\n    [Parameter(ParameterSetName = 'Default')]\n    [string]$Surname,\n\n    [Parameter(Mandatory, ParameterSetName = 'Default')]\n    [securestring]$AccountPassword\n)\n\n\"New-ADUser -Path $Path -AccountPassword $AccountPassword -Name $Name -GivenName $GivenName -Surname $Surname -Enabled $true\" | Out-File -FilePath C:\\Commands.txt -Append\nNew-ADUser -Path $Path -AccountPassword $AccountPassword -Name $Name -GivenName $GivenName -Surname $Surname -Enabled $true\n"
    - Name: Remove-xAdUser
      ScriptBlock: |
        param (
            [Parameter(Mandatory, ParameterSetName = 'Default')]
            [string]$Identity
        )

        "Remove-ADUser -Identity $Identity -Confirm:$false" | Out-File -FilePath C:\Commands.txt -Append
        Remove-ADUser -Identity $Identity -Confirm:$false
  - Path: C:\Program Files\WindowsPowerShell\Modules\Demos\RoleCapabilities\AdTest.psrc
    VisibleFunctions:
    - Get-xDate
    FunctionDefinitions:
    - Name: Get-xDate
      ScriptBlock: |
        Get-Date
  - Path: C:\Program Files\WindowsPowerShell\Modules\JeaDiscovery\RoleCapabilities\JeaCapability.psrc
    ModulesToImport: JeaDiscovery
    VisibleFunctions:
    - Get-JeaPSSessionConfiguration
    - Get-JeaPSSessionCapability
    FunctionDefinitions:
    - Name: Get-JeaPSSessionConfiguration
      ScriptBlock: |
        Get-PSSessionConfiguration | Where-Object Name -notlike microsoft*
    - Name: Get-JeaPSSessionCapability
      ScriptBlock: "param(\n    [Parameter(Mandatory)]\n    [string]$ConfigurationName,\n\n    [Parameter(Mandatory)]\n    [string]$Username,\n          \n    [switch]$OnlyVisibleFunctions\n)\n      \nif ($OnlyVisibleFunctions) {\n    $modules = Get-ModuleWithRoleCapabilities\n    $roles = Get-PSRoleCapability -ModuleBasePath $modules[0].ModuleBase\n}\n\nGet-PSSessionCapability -ConfigurationName $ConfigurationName -Username $Username | ForEach-Object {\n    $return = if ($OnlyVisibleFunctions -and $_.Name -in $roles.VisibleFunctions) {\n        $true\n    }\n    elseif (-not $OnlyVisibleFunctions) {\n        $true\n    }\n\n    if ($return) {\n        [pscustomobject]@{\n            Name        = $_.Name\n            Parameters  = $_.Parameters\n            CommandType = $_.CommandType\n            ScriptBlock = $_.ScriptBlock\n        }\n    }\n}\n"
  - Path: C:\Program Files\WindowsPowerShell\Modules\Demos\RoleCapabilities\Demo1.psrc
    VisibleFunctions:
    - Start-xSleep1
    - Start-xSleep2
    - Start-xSleep3
    FunctionDefinitions:
    - Name: Start-xSleep1
      ScriptBlock: |
        param (
            [Parameter(Mandatory)]
            [int]$Seconds
        )

        Start-Sleep -Seconds $Seconds
    - Name: Start-xSleep2
      ScriptBlock: |
        param (
            [Parameter(Mandatory, ParameterSetName = 'Seconds')]
            [int]$Seconds,

            [Parameter(Mandatory, ParameterSetName = 'Milliseconds')]
            [long]$Milliseconds
        )

        Start-Sleep @PSBoundParameters
    - Name: Start-xSleep3
      ScriptBlock: |
        Start-Sleep -Seconds 3
  - Path: C:\Program Files\WindowsPowerShell\Modules\Demos\RoleCapabilities\Demo2.psrc
    VisibleFunctions:
    - Set-xContent
    - Get-xContent
    - Get-ParamSetTest
    - Set-xCredentialsToFile
    FunctionDefinitions:
    - Name: Set-xContent
      ScriptBlock: |
        param (
          [Parameter()]
          [object[]]$Value = 'Test',

          [Parameter(Mandatory, ParameterSetName = 'FileUpload')]
          [Parameter(Mandatory, ParameterSetName = 'Path')]
          [string]$Path,

          [Parameter(Mandatory, ParameterSetName = 'LiteralPath')]
          [string]$LiteralPath,

          [Parameter(Mandatory, ParameterSetName = 'FileUpload')]
          [string]$FilePath,

          [Parameter(ParameterSetName = 'FileUpload')]
          [switch]$DoNotArchiveInputFile
        )
        if ($FilePath)
        {
          get-content $filepath | set-content $path
          if (-not $DoNotArchiveInputFile) {
            del $FilePath -force
          }
        }
        else
        {
          Set-Content @PSBoundParameters
        }
    - Name: Get-xContent
      ScriptBlock: |
        param (
          [Parameter(Mandatory, ParameterSetName = 'Path')]
          [string]$Path,

          [Parameter(Mandatory, ParameterSetName = 'LiteralPath')]
          [string]$LiteralPath,

          [switch]$Raw
        )

        Get-Content @PSBoundParameters
    - Name: Set-xCredentialsToFile
      ScriptBlock: |
        param (
          [Parameter(Mandatory, ParameterSetName = 'Path')]
          [string]$Path,

          [Parameter(Mandatory, ParameterSetName = 'LiteralPath')]
          [string]$LiteralPath,

          [Parameter()]
          [pscredential]$Credential,

          [Parameter()]
          [System.Security.SecureString]$Password
        )

        Get-Date
    - Name: Get-ParamSetTest
      ScriptBlock: |
        [CmdletBinding(DefaultParameterSetName = 'ps1')]
        param (
          [Parameter()]
          [object[]]$P0 = 'Test',

          [Parameter(Mandatory, ParameterSetName = 'PS1')]
          [string]$P10,

          [Parameter(Mandatory, ParameterSetName = 'PS1')]
          [string]$P11,

          [Parameter(Mandatory, ParameterSetName = 'PS2')]
          [string]$P20,

          [Parameter(ParameterSetName = 'PS2')]
          [string]$P21,

          [Parameter(Mandatory)]
          [string]$P31,

          [Parameter()]
          [string]$P32
        )

        $PSBoundParameters
  - Path: C:\Program Files\WindowsPowerShell\Modules\Demos\RoleCapabilities\DhcpManagement.psrc
    ModulesToImport:
    - DhcpServer
    VisibleFunctions:
    - New-xDhcpReservation
    FunctionDefinitions:
    - Name: New-xDhcpReservation
      ScriptBlock: |
        param (
            [Parameter(Mandatory, ParameterSetName = 'ByParameters')]
            [string]$ScopeId,

            [Parameter(Mandatory, ParameterSetName = 'ByParameters')]
            [string]$IPAddress,

            [Parameter(Mandatory, ParameterSetName = 'ByParameters')]
            [string]$ClientId,

            [Parameter(Mandatory, ParameterSetName = 'ByParameters')]
            [string]$Name,

            [Parameter(Mandatory, ParameterSetName = 'FileUpload')]
            [string]$FilePath,

            [Parameter(ParameterSetName = 'FileUpload')]
            [switch]$DoNotArchiveInputFile
        )

        if ($PSCmdlet.ParameterSetName -eq 'ByParameters') {
            Add-DhcpServerv4Reservation @PSBoundParameters
            "DHCP Reservation created"
        }
        elseif ($PSCmdlet.ParameterSetName -eq 'FileUpload') {
            $data = Get-Content -Path $FilePath | ConvertFrom-Csv -Delimiter ';'
            $data | Add-DhcpServerv4Reservation
            if (-not $DoNotArchiveInputFile) {
                Remove-Item -Path $FilePath -Force
            }
            "Created $($data.Count) DHCP reservations."
        }
        else {
            Write-Error 'Unknown parameter set'
        }
FilesAndFolders:
  Items:
  - DestinationPath: C:\Program Files\WindowsPowerShell\Modules\JeaDiscovery\JeaDiscovery.psm1
    Type: File
    Contents: "\nfunction Copy-Object {\n    param (\n        [object]\n        $DeepCopyObject\n    )\n\n    $serialData = [System.Management.Automation.PSSerializer]::Serialize($DeepCopyObject)\n    [System.Management.Automation.PSSerializer]::Deserialize($serialData)\n}\n\nfunction Get-ModuleWithRoleCapabilities {\n  param(\n      $BasePath = ($env:PSModulePath -split ';' | Where-Object { $_ -like '*Program Files*'})\n  )\n\n  dir -Path $BasePath | Where-Object { dir -Path $_.FullName | Where-Object { $_.Name -eq 'RoleCapabilities' } } | ForEach-Object {\n      [pscustomobject]@{\n          Name = $_.BaseName\n          ModuleBase = $_.FullName\n          RoleCapabilities = (dir -Path \"$($_.FullName)\\RoleCapabilities\")\n      }\n  }\n}\n\nfunction Get-PSRoleCapability {\n  param (\n      [Parameter(Mandatory)]\n      [string[]]$ModuleBasePath\n  )\n\n  $moduleName = Split-Path -Path $ModuleBasePath -Leaf\n  $psrcFiles = dir -Path \"$ModuleBasePath\\RoleCapabilities\" -Filter *.psrc\n  \n  foreach ($psrcFile in $psrcFiles) {\n      $h = [ordered]@{}\n      $h.Add('ModuleName', $moduleName)\n      $h.Add('RoleName', $psrcFile.BaseName)\n      \n      (Invoke-Expression -Command (Get-Content -Path $psrcFile.FullName -Raw)).GetEnumerator() | ForEach-Object {\n          $h.Add($_.Key, $_.Value)\n      }\n      [pscustomobject]$h\n  }\n}\n\nfunction Get-FunctionDefaultParameter {\n    <#\n    .SYNOPSIS\n    This is a function that will find all of the default parameter names and values from a given function.\n    \n    .EXAMPLE\n    PS> Get-FunctionDefaultParameter -FunctionName Get-Something\n    \n    .PARAMETER FuntionName\n    A mandatory string parameter representing the name of the function to find default parameters to.\n    \n    #>\n    [CmdletBinding()]\n    [OutputType([hashtable])]\n    param\n    (\n        [Parameter(Mandatory, ParameterSetName = 'FunctionName')]\n        [ValidateNotNullOrEmpty()]\n        [string]$FunctionName,\n\n        [Parameter(Mandatory, ParameterSetName = 'Scriptblock')]\n        [ValidateNotNullOrEmpty()]\n        [scriptblock]$Scriptblock\n    )\n    try {\n        $ast = if ($FunctionName) {\n            (Get-Command -Name $FunctionName).ScriptBlock.Ast\n        }\n        else {\n            $Scriptblock.Ast\n        }\n        \n        if (-not $ast) {\n            return @{}\n        }\n        $select = @{ Name = 'Name'; Expression = { $_.Name.VariablePath.UserPath } },\n        @{ Name = 'Value'; Expression = { $_.DefaultValue.Extent.Text -replace \"`\"|'\" } }\n        \n        $ht = @{ }\n        @($ast.FindAll( { $args[0] -is [System.Management.Automation.Language.ParameterAst] }, $true) | Where-Object { $_.DefaultValue } | Select-Object -Property $select).ForEach( {\n                $ht[$_.Name] = $_.Value    \n            })\n        $ht\n        \n    }\n    catch {\n        Write-Error -Message $_.Exception.Message\n    }\n}\n\nfunction Get-FunctionParameterSet {\n    <#\n            .SYNOPSIS\n            This is a function that will find all of the default parameter names and values from a given function.\n    \n            .EXAMPLE\n            PS> Get-FunctionDefaultParameter -FunctionName Get-Something\n    \n            .PARAMETER FuntionName\n            A mandatory string parameter representing the name of the function to find default parameters to.\n    \n    #>\n    [CmdletBinding()]\n    [OutputType([hashtable])]\n    param\n    (\n        [Parameter(Mandatory, ParameterSetName = 'FunctionName')]\n        [ValidateNotNullOrEmpty()]\n        [string]$FunctionName,\n\n        [Parameter(Mandatory, ParameterSetName = 'Scriptblock')]\n        [ValidateNotNullOrEmpty()]\n        [scriptblock]$Scriptblock\n    )\n    try {\n        $ast = if ($FunctionName) {\n            (Get-Command -Name $FunctionName).ScriptBlock.Ast\n        }\n        else {\n            $Scriptblock.Ast\n        }\n        \n        if (-not $ast) {\n            return @{}\n        }\n        $select = @{ Name = 'Name'; Expression = { $_.Name.VariablePath.UserPath } },\n        @{ Name = 'Value'; Expression = { $_.DefaultValue.Extent.Text -replace \"`\"|'\" } }\n        \n        $ht = @{ }\n        $params = $ast.FindAll( { $args[0] -is [System.Management.Automation.Language.ParameterAst] }, $true)\n\n        $parameterSets = @()\n        $parameterSets += $params | ForEach-Object { ($_.Attributes.NamedArguments | Where-Object ArgumentName -eq 'ParameterSetName').Argument.Value } | Select-Object -Unique\n        if ($parameterSets.Count -eq 0) {\n            $parameterSets += '__Default'\n        }\n        $parameterSets\n    }\n    catch {\n        Write-Error -Message $_.Exception.Message\n    }\n}\n\nfunction Get-FunctionParameter {\n    param(\n        [Parameter(Mandatory)]\n        [scriptblock]\n        $ScriptBlock,\n\n        [Parameter()]\n        [string]\n        $ParameterSetName\n    )\n\n    $commonParameters = [System.Management.Automation.Internal.CommonParameters].GetProperties().Name\n    \n    $guid = New-Guid\n    $f = New-Item -Path \"Function:\\$guid\" -Value $ScriptBlock\n\n    $parameters = (Get-Command -Name $guid).Parameters\n    if ($parameters.Count -eq 0) {\n        return\n    }\n    $parameters = $parameters.GetEnumerator() | Where-Object Key -NotIn $commonParameters\n    \n    if (-not $ParameterSetName) {\n        if ($parameters.GetType().Name -eq 'KeyValuePair`2') {\n            $parameters\n        }\n        else {\n            $parameters.GetEnumerator()\n        }\n    }\n    else {\n        $p = if ($parameters.GetType().Name -eq 'KeyValuePair`2') {\n            $parameters\n        }\n        else {\n            $parameters.GetEnumerator()\n        }\n        $p | Where-Object {\n            $_.Value.ParameterSets.Keys -contains $ParameterSetName -or $_.Value.ParameterSets.Keys -contains '__AllParameterSets'\n        }\n    }\n    \n    $f | Remove-Item\n}\n\nfunction Get-JeaEndpoint {\n    param(\n        [Parameter(Mandatory)]\n        [string]\n        $ComputerName,\n\n        [Parameter()]\n        [string]\n        $DiscoveryEndpoint = 'JeaDiscovery',\n\n        [Parameter()]\n        [pscredential]\n        $Credential\n    )\n    \n    $param = @{\n        ComputerName      = $ComputerName\n        ConfigurationName = $DiscoveryEndpoint\n        ScriptBlock       = { Get-JeaPSSessionConfiguration }\n    }\n    if ($Credential) {\n        $param.Add('Credential', $Credential)\n    }\n\n    Invoke-Command @param | Where-Object Name -ne JeaDiscovery | ForEach-Object {\n        [pscustomobject]@{\n            Author = $_.Author\n            GroupManagedServiceAccount = $_.GroupManagedServiceAccount\n            RoleDefinitions = $_.RoleDefinitions\n            SessionType = $_.SessionType\n            #SchemaVersion                 : 2.0.0.0\n            #GUID                          : 7da04eca-39fd-4aef-b3a4-7f25d7d083d3\n            #RunAsPassword                 : System.Security.SecureString\n            #ResourceUri                   : http://schemas.microsoft.com/powershell/AdManagement\n            #Capability                    : {Shell}\n            #PSVersion                     : 5.1\n            #AutoRestart                   : false\n            #ExactMatch                    : False\n            #RunAsVirtualAccount           : false\n            #SDKVersion                    : 2\n            #Uri                           : http://schemas.microsoft.com/powershell/AdManagement\n            #MaxConcurrentCommandsPerShell : 2147483647\n            #IdleTimeoutms                 : 7200000\n            #ParentResourceUri             : http://schemas.microsoft.com/powershell/AdManagement\n            RunAsUser = $_.RunAsUser\n            #OutputBufferingMode           : Block\n            #Architecture                  : 64\n            #UseSharedProcess              : false\n            #MaxProcessesPerShell          : 2147483647\n            #Filename                      : %windir%\\system32\\pwrshplugin.dll\n            #MaxShellsPerUser              : 2147483647\n            #ConfigFilePath                : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\SessionConfig\\AdManagement_7da04eca-39fd-4aef-b3a4-7f25d7d083d3.pssc\n            #MaxShells                     : 2147483647\n            #SupportsOptions               : true\n            #lang                          : en-US\n            #MaxIdleTimeoutms              : 2147483647\n            #xmlns                         : http://schemas.microsoft.com/wbem/wsman/1/config/PluginConfiguration\n            #Enabled                       : True\n            SecurityDescriptorSddl = $_.SecurityDescriptorSddl\n            Name = $_.Name\n            #ProcessIdleTimeoutSec         : 0\n            #MaxConcurrentUsers            : 2147483647\n            #MaxMemoryPerShellMB           : 2147483647\n            RunAsVirtualAccountGroups = $_.RunAsVirtualAccountGroups\n            #XmlRenderingType              : text\n            Permission = $_.Permission\n            #PSComputerName                : localhost\n            RunspaceId = $_.RunspaceId\n            #PSShowComputerName            : True\n        }\n    }\n}\n\nfunction Get-JeaTestEndpoint {\n    param(\n        [Parameter(Mandatory)]\n        [string]\n        $ComputerName,\n\n        [Parameter()]\n        [string]\n        $DiscoveryEndpoint = 'JeaDiscovery',\n\n        [Parameter()]\n        [pscredential]\n        $Credential\n    )\n    \n    1..4 | ForEach-Object {\n        [PSCustomObject]@{ \n            Name           = \"Local$_\"\n            PSComputerName = $ComputerName\n            PSVersion      = 5.1\n            Permission     = 'contoso\\Domain Users AccessAllowed, contoso\\Domain Computers AccessAllowed'\n        }\n    }\n}\n\nfunction Get-JeaEndpointCapability {\n    param(\n        [Parameter(Mandatory)]\n        [string]\n        $ComputerName,\n\n        [Parameter(Mandatory)]\n        [string]\n        $JeaEndpointName,\n\n        [Parameter(Mandatory)]\n        [string]\n        $Username,\n\n        [Parameter()]\n        [string]\n        $DiscoveryEndpoint = 'JeaDiscovery',\n\n        [Parameter()]\n        [pscredential]\n        $Credential\n    )\n\n    $param = @{\n        ComputerName      = $ComputerName\n        ConfigurationName = $DiscoveryEndpoint\n        ScriptBlock       = { Get-JeaPSSessionCapability -ConfigurationName $args[0] -Username $args[1] -OnlyVisibleFunctions }\n        ArgumentList      = $JeaEndpointName, $Username\n    }\n    if ($Credential) {\n        $param.Add('Credential', $Credential)\n    }\n\n    Invoke-Command @param\n}\n\nfunction Get-JeaTestEndpointCapability {\n    param(\n        [Parameter(Mandatory)]\n        [string]$JeaEndpointName\n    )\n\n    Get-Command -CommandType Cmdlet |\n    Where-Object { $_.Parameters } |\n    Get-Random -Count 10 |\n    Select-Object -Property Name, Parameters, CommandType\n}\n\nfunction Invoke-Ternary {\n    param\n    (\n        [Parameter(Mandatory)]\n        [scriptblock]\n        $Decider,\n\n        [Parameter(Mandatory)]\n        [scriptblock]\n        $IfTrue,\n\n        [Parameter(Mandatory)]\n        [scriptblock]\n        $IfFalse\n    )\n\n    if (&$Decider) {\n        &$IfTrue\n    }\n    else {\n        &$IfFalse\n    }\n}\n"
Name: FIWeb2
